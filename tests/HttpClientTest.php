<?php

namespace Test;

use Clickatell\Exceptions\AuthenticationException;
use PHPUnit\Exception;
use PHPUnit\Framework\TestCase;
use Clickatell\Common\HttpResponse;
use Clickatell\Common\HttpClient;


class HttpClientTest extends TestCase
{
    protected HttpClient $client;
    protected $mockClient;

    public function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->client = new HttpClient('v1');
        $this->mockClient = $this->getMockBuilder(HttpClient::class)
            ->setConstructorArgs(['v1'])->getMock();
    }

    /**
     * Test endpoint
     */
    public function testEndpoint(): void
    {
        $this->client->setEndpoint('someEndpoint');
        $this->assertSame('someEndpoint',
            $this->client->getEndpoint());
    }

    /**
     * Test timeout and connection timeout
     */
    public function testTimeout(): void
    {
        $this->client->setTimeout(20);
        $this->assertSame(20,
            $this->client->getTimeout());

        $this->client->setConnectionTimeout(24);
        $this->assertSame(24,
            $this->client->getConnectionTimeout());
    }

    /**
     * Test headers
     */
    public function testHeaders()
    {
        $this->client->setHeaders(['Authentication'=> 'someToken']);
        $this->assertNotEmpty($this->client->getHeaders());
        $this->assertSame('someToken',
            $this->client->getHeaders()['Authentication']);
    }

    /**
     * Test options
     */
    public function testOptions()
    {
        $this->assertFalse(isset($this->client->getOptions()['addedOption']));
        $this->client->addOption('addedOption', 20);
        $this->assertSame(20, $this->client->getOptions()['addedOption']);
    }

    /**
     * Test request
     */
    public function testRequestSuccess()
    {
        $this->mockClient->method('request')->with('GET', 'message')->willReturn(new HttpResponse());
        $this->assertTrue($this->mockClient->request('GET', 'message')->success());
    }
}
